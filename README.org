* yamlett - Yet Another Machine Learning Experiment Tracking Tool
:PROPERTIES:
:header-args:jupyter-python: :session yamlett :results value raw :async yes
:END:

=yamlett= provides you with a simple but flexible way to organize and track your
ML experiments.
** MongoDB PoC
#+begin_src jupyter-python
import pymongo
m = pymongo.MongoClient()
#+end_src

#+RESULTS:

#+begin_src jupyter-python
m.list_database_names()
#+end_src

#+RESULTS:
| admin | config | local | turf | yamlett |

#+begin_src jupyter-python
from uuid import uuid4
run_id = uuid4().hex
run_id
#+end_src

#+RESULTS:
: f0380d099f4242f68b59de84cfc0ec7d

#+begin_src jupyter-python
r = m.yamlett.runs.update_one({"_id": run_id}, {"$set": {"la": 1}})
r
#+end_src

#+RESULTS:
: <pymongo.results.UpdateResult at 0x7f9b6aa70870>

#+begin_src jupyter-python
r.modified_count
#+end_src

#+RESULTS:
: 0

#+begin_src jupyter-python
m.yamlett.runs.insert_one({"_id": run_id})
#+end_src

#+RESULTS:
: <pymongo.results.InsertOneResult at 0x7fe474f9cd70>

#+begin_src jupyter-python
# log("f1_score", 0.97)
m.yamlett.runs.update_one({"_id": run_id}, {"$set":  {"f1_score": 0.97}})
#+end_src

#+RESULTS:
: <pymongo.results.UpdateResult at 0x7fe47479f6e0>

#+begin_src jupyter-python
# log("metrics", {"f1_score": 0.95, "precision_score": .94})
m.yamlett.runs.update_one({"_id": run_id}, {"$set":  {"metrics": {"f1_score": 0.95, "precision_score": 0.94}}})
#+end_src

#+RESULTS:
: <pymongo.results.UpdateResult at 0x7fe474f9c820>

#+begin_src jupyter-python
# log("metrics.f1_score", 0.98)
m.yamlett.runs.update_one({"_id": run_id}, {"$set": {"metrics.f1_score": 0.98}})
#+end_src

#+RESULTS:
: <pymongo.results.UpdateResult at 0x7fe475bf8a00>

#+begin_src jupyter-python
config = dict(
    dataset=dict(
        name="breast_cancer",
        version="1.0",
    ),
    model=dict(
        kind="logistic regression",
        parameters=dict(
            regularization=0.01,
            fit_intercept=False
        )
    )
)

# log("config", config)
m.yamlett.runs.update_one({"_id": run_id}, {"$set": {"config": config}})
#+end_src

#+RESULTS:
: <pymongo.results.UpdateResult at 0x7fe47478a3c0>

#+begin_src jupyter-python
m.close()
#+end_src

** API UI
#+begin_src jupyter-python :eval no
from yamlett import experiment

with experiment() as E:
    dataset = "breast_cancer"
    s3_folder = "s3://virgile/breast_cancer"
    X = pd.read_parquet(f"{s3_folder}/features.parquet")
    y = pd.read_parquet(f"{s3_folder}/labels.parquet")
    
    E.record("dataset", {
        "name": dataset,
        "path": s3_folder,
        "n_observations": X.shape[0],
        "n_features": X.shape[1],
        "class_distribution": y.value_counts().to_dict()
    })
#+end_src


** Example
#+begin_src jupyter-python
%load_ext autoreload
%autoreload 2
#+end_src

#+RESULTS:

#+begin_src jupyter-python :results raw output
from yamlett.tracking import Run
import numpy as np

with Run() as r:
    run_id = r.id
    r.store("f1_score", 0.97)

with Run(run_id, resume=True) as r:
    print(r.id)

    for i in np.linspace(0, 1, 50):
        r.store("metrics.f1", i, append=True)
        r.store("metrics.precision", 1 - i, append=True)

    config = dict(
        dataset=dict(
            name="breast_cancer",
            version="1.0",
        ),
        model=dict(
            kind="logistic regression",
            parameters=dict(regularization=0.01, fit_intercept=False),
        ),
    )
    r.store("config", config)
#+end_src

#+RESULTS:
: 8c675bd7458f436fb9b4e8205d9dfef0

#+begin_src jupyter-python
import IPython
from tabulate import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    def __call__(self, obj):
        try:
            return tabulate(obj, headers='keys',
                            tablefmt='orgtbl', showindex='always')
        except:
            return None

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()
#+end_src

#+RESULTS:

#+begin_src jupyter-python
from yamlett.tracking import Experiment
import pandas as pd

e = Experiment()

pd.DataFrame(e.aggregate([
    {
        "$match": {
            "created_at": {"$exists": True},
            "finished_at": {"$exists": True}},
        },
    {
        "$project": {
            "id": 1,
            "created_at": 1,
            "finished_at": 1,
            "f1": {"$arrayElemAt": ["$metrics.f1", 10]}
        }
    }
]))
#+end_src

#+RESULTS:
|    | _id                              | id                               | created_at                 | finished_at                |         f1 |
|----+----------------------------------+----------------------------------+----------------------------+----------------------------+------------|
|  0 | efc0301ff5e24cd692444401daa186b7 | efc0301ff5e24cd692444401daa186b7 | 2020-11-26 10:16:24.404000 | 2020-11-26 10:16:24.685000 |   0.204082 |
|  1 | 0174ee42dac6486a8ae98492207aee46 | 0174ee42dac6486a8ae98492207aee46 | 2020-11-26 10:21:10.513000 | 2020-11-26 10:21:10.786000 |   0.204082 |
|  2 | ff871b28836d4465b80676c65fbe71ae | ff871b28836d4465b80676c65fbe71ae | 2020-11-26 10:23:38.791000 | 2020-11-26 10:23:39.064000 |   0.204082 |
|  3 | 37dd179021744801a7a44de746948134 | 37dd179021744801a7a44de746948134 | 2020-11-26 12:06:24.423000 | 2020-11-26 12:06:24.437000 | nan        |
|  4 | 0ada0d1c26e6482694e18faa0b0193a9 | 0ada0d1c26e6482694e18faa0b0193a9 | 2020-11-26 12:06:49.646000 | 2020-11-26 12:06:51.315000 |   0.204082 |
|  5 | 19b0acc3d34241b182b1bb008ab1884d | 19b0acc3d34241b182b1bb008ab1884d | 2020-11-26 13:13:54.836000 | 2020-11-26 13:13:56.315000 |   0.204082 |
|  6 | e3c90e31dea5440496668c4e536455dc | e3c90e31dea5440496668c4e536455dc | 2020-11-26 13:15:22.769000 | 2020-11-26 13:15:24.043000 |   0.204082 |
|  7 | 390267c29e7442bebc98bea6d30cc8ff | 390267c29e7442bebc98bea6d30cc8ff | 2020-11-26 13:24:30.990000 | 2020-11-26 13:24:32.219000 |   0.204082 |
|  8 | 8c675bd7458f436fb9b4e8205d9dfef0 | 8c675bd7458f436fb9b4e8205d9dfef0 | 2020-11-26 13:25:01.030000 | 2020-11-26 13:25:02.227000 |   0.204082 |

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:

